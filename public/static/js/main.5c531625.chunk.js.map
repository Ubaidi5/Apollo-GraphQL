{"version":3,"sources":["component/launches.js","component/launch.js","App.js","serviceWorker.js","index.js"],"names":["LAUNCHES_QUERY","gql","Launches","className","query","loading","error","data","console","log","launches","map","launch","key","flight_number","Component","LaunchItem","props","classNames","upcoming","mission_name","launch_date_local","to","MissionKey","LAUNCH_QUERY","Launch","this","match","params","parseInt","variables","style","color","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","textAlign","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c531625.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport classNames from \"classnames\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n\tquery LaunchesQuery {\r\n\t\tlaunches {\r\n\t\t\tflight_number\r\n\t\t\tmission_name\r\n\t\t\tlaunch_date_local\r\n\t\t\tupcoming\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n//Our main Launch Component\r\n\r\nclass Launches extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='display-4 my-3'>Launches</h1>\r\n\t\t\t\t<Query query={LAUNCHES_QUERY}>\r\n\t\t\t\t\t{({ loading, error, data }) => {\r\n\t\t\t\t\t\tif (loading) return <h4>Loading...</h4>;\r\n\t\t\t\t\t\tif (error) console.log(error);\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t<MissionKey />\r\n\t\t\t\t\t\t\t\t{data.launches.map((launch) => (\r\n\t\t\t\t\t\t\t\t\t<LaunchItem key={launch.flight_number} launch={launch} />\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t</Query>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Launches;\r\n\r\n// Component which contain Launch items\r\n\r\nconst LaunchItem = (props) => {\r\n\treturn (\r\n\t\t<div className='card card-body mb-3'>\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-md-9'>\r\n\t\t\t\t\t<h4>\r\n\t\t\t\t\t\tMission:{\" \"}\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclassName={classNames({\r\n\t\t\t\t\t\t\t\t\"text-success\": props.launch.upcoming,\r\n\t\t\t\t\t\t\t\t\"text-danger\": !props.launch.upcoming,\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{props.launch.mission_name}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</h4>\r\n\t\t\t\t\t<p>Date: {props.launch.launch_date_local}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='col-md-3'>\r\n\t\t\t\t\t<Link\r\n\t\t\t\t\t\tclassName='btn btn-secondary'\r\n\t\t\t\t\t\tto={`/launch/${props.launch.flight_number}`}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLaunch Details\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// Mission Key component which tell about the colors\r\n\r\nconst MissionKey = () => {\r\n\treturn (\r\n\t\t<div className='my-3'>\r\n\t\t\t<p>\r\n\t\t\t\t<span className='px-3 mr-2 bg-success'>Success</span>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<span className='px-3 mr-2 bg-danger'>Fail</span>\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { Component } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n\tquery LaunchQuery($flight_number: Int!) {\r\n\t\tlaunch(flight_number: $flight_number) {\r\n\t\t\tflight_number\r\n\t\t\tmission_name\r\n\t\t\tlaunch_year\r\n\t\t\tupcoming\r\n\t\t\tlaunch_date_local\r\n\t\t\trocket {\r\n\t\t\t\trocket_id\r\n\t\t\t\trocket_name\r\n\t\t\t\trocket_type\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport default class Launch extends Component {\r\n\trender() {\r\n\t\tlet { flight_number } = this.props.match.params;\r\n\t\tflight_number = parseInt(flight_number);\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n\t\t\t\t\t{({ loading, error, data }) => {\r\n\t\t\t\t\t\tif (loading) return <h4>Loading...</h4>;\r\n\t\t\t\t\t\tif (error) return console.log(error);\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h1 className='display-4 my-3 '>\r\n\t\t\t\t\t\t\t\t\t{\" \"}\r\n\t\t\t\t\t\t\t\t\t<span style={{ color: \"rgba(255,0,0,0.3)\" }}>\r\n\t\t\t\t\t\t\t\t\t\tMission:\r\n\t\t\t\t\t\t\t\t\t</span>{\" \"}\r\n\t\t\t\t\t\t\t\t\t{data.launch.mission_name}\r\n\t\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t\t\t<h4 className='mb-3'>Mission Details</h4>\r\n\t\t\t\t\t\t\t\t<ul className='list-group'>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tFlight Number: {flight_number}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tLaunch Year: {data.launch.launch_year}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tLaunch Success:{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classNames({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"text-success\": data.launch.upcoming,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\"text-danger\": !data.launch.upcoming,\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{data.launch.upcoming ? \"Yes\" : \"No\"}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tFlight Number: {flight_number}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<h4 className='my-3'>Rocket Details</h4>\r\n\t\t\t\t\t\t\t\t<ul className='list-group'>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tRocket ID: {data.launch.rocket.rocket_id}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tRocket Name: {data.launch.rocket.rocket_name}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className='list-group-item'>\r\n\t\t\t\t\t\t\t\t\t\tRocket Type: {data.launch.rocket.rocket_type}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Link to='/' className='btn btn-secondary'>\r\n\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t</Query>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Launches from \"./component/launches\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Launch from \"./component/launch\";\n\nconst client = new ApolloClient({\n\turi: \"/graphql\",\n});\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<h1 style={{ textAlign: \"center\" }}>SpaceX Launches</h1>\n\t\t\t\t\t<Route exact path='/' component={Launches} />\n\t\t\t\t\t<Route exact path='/launch/:flight_number' component={Launch} />\n\t\t\t\t</div>\n\t\t\t</BrowserRouter>\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}